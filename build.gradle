defaultTasks 'clean', 'build', 'test'

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath "com.github.samueltbrown:gradle-cucumber-plugin:0.8"

		// if you use the version of cucumber-jvm that the plugin was built with
		classpath "info.cukes:cucumber-core:1.2.2"
	}
}

ext {
	groovyVersion = '2.3.10'
	gebVersion = '0.12.2'
	seleniumVersion = '2.47.2'
	cucumberJvmVersion = '1.2.2'
	chromeDriverVersion = '2.19'
	phantomJsVersion = '1.9.8'

	ciBuild = System.getenv('SNAP_CI')
}

apply plugin: "groovy"
apply plugin: "com.github.samueltbrown.cucumber"

//apply from: "gradle/idea/idea.gradle"
apply from: "gradle/osSpecificDownloads.gradle"



apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "war"
apply plugin: 'jetty'

repositories {
    mavenCentral()
}


ext.springVersion = "3.2.2"
ext.springSecurity = "3.0.5"
ext.springExceptionHandlerVersion = "2.0.1"
ext.springDataVersion = "1.6.1"

List SPRING = [
        "org.springframework.data:spring-data-mongodb:${springDataVersion}.RELEASE",
         "org.springframework:spring-webmvc:${springVersion}.RELEASE",

        "org.springframework:spring-test:${springVersion}.RELEASE",
        "org.springframework:spring-context-support:${springVersion}.RELEASE",
        "org.springframework.security:spring-security-core:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-web:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-config:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-ldap:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-acl:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-taglibs:${springSecurity}.RELEASE",
        "com.github.raychatter:spring-restful-exception-handler:${springExceptionHandlerVersion}"

]

List SPRING_SOURCES = [
        "org.springframework:spring-webmvc:${springVersion}.RELEASE:sources",

         "org.springframework.security:spring-security-core:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-web:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-config:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-ldap:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-acl:${springSecurity}.RELEASE",
        "org.springframework.security:spring-security-taglibs:${springSecurity}.RELEASE",
        "com.github.raychatter:spring-restful-exception-handler:${springExceptionHandlerVersion}",
        "org.springframework.data:spring-data-mongodb:${springDataVersion}.RELEASE"

]

List XUNIT = [
        'junit:junit:4.10',
        'org.mockito:mockito-all:1.9.5'
]

dependencies {
testCompile 'junit:junit:4.11',
            'info.cukes:cucumber-java:1.1.8',
            'info.cukes:cucumber-junit:1.1.8'
    compile SPRING, SPRING_SOURCES
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.4'
    compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-lgpl', version: '1.9.11'
    compile group:'com.fasterxml.jackson.core', name:'jackson-databind', version:'2.2.3'
	compile group: 'org.codehaus.jackson', name: 'jackson-mapper-lgpl', version: '1.9.11'
	compile group: 'joda-time',name:'joda-time',version:'1.6.1'
	compile group: 'com.google.guava',name:'guava',version:'17.0'
	compile group: 'commons-io',name:'commons-io',version:'2.4'
	compile group: 'commons-fileupload',name:'commons-fileupload',version:'1.3'
    compile  group: 'info.cukes', name: 'cucumber-java', version: '1.1.2'
    //testCompile  group: 'info.cukes', name: 'cucumber-java', version: '1.1.2'
    compile 'javax.activation:activation:1.1'
    compile 'javax.mail:mail:1.4.1'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.apache.velocity:velocity-tools:2.0'

    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'ch.qos.logback:logback-core:1.1.3'
    compile 'org.codehaus.groovy:groovy-all:2.3.1'
	testCompile 'org.spockframework:spock-core:1.0-groovy-2.3'
	testCompile 'cglib:cglib-nodep:2.2'
    testCompile SPRING, SPRING_SOURCES, XUNIT
    
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.+'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.+'
    
  
    
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
	testCompile "org.gebish:geb-core:$gebVersion"
	testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"

	testCompile "info.cukes:cucumber-core:$cucumberJvmVersion"
	testCompile "info.cukes:cucumber-groovy:$cucumberJvmVersion"

	// this supplies some pre-built cucumber steps for driving Geb,
	// see https://github.com/tomdcc/geb-cucumber
	testCompile "io.jdev.geb:geb-cucumber:0.3"

	// pick whichever drivers you want. We test against most of them here.
	// see src/test/resources/GebConfig.groovy for how to switch between them
	cucumberRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
	cucumberRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
	// using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
	cucumberRuntime("com.codeborne:phantomjsdriver:1.2.1") {
		// phantomjs driver pulls in a different selenium version
		transitive = false
	}
}

test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }               
}

cucumber {
	formats = [
		'pretty', // prints nice format out to the console
		'html:build/reports/cucumber', // html
		'junit:build/cucumber.xml' // junit format for integration with CI tool etc
	]
	// src/cucumber/resources is included automatically
	glueDirs = [
		"classpath:io.jdev.geb.cucumber.steps.groovy.en"
	]
}

tasks.cucumber {
	dependsOn unzipChromeDriver, unzipPhantomJs

	def chromeDriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
	def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"

	jvmOptions.systemProperties([
		"webdriver.chrome.driver": new File(unzipChromeDriver.outputs.files.singleFile, chromeDriverFilename).absolutePath,
		"phantomjs.binary.path": new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath,
		"geb.cucumber.step.packages": "pages",
		"geb.env": System.getProperty("geb.env")
	])
}

apply from: "gradle/ci.gradle"